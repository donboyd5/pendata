---
format:
  html:
    toc: true
    toc-depth: 4
    page-layout: full
    css: wider.css
---

# Make params -- a temporary step

## Setup, get preliminary list, and target data

```{r}
#| label: setup

GROOT <- rprojroot::find_root(rprojroot::has_file(".git/index"))
source(fs::path(GROOT, "data-raw", "R", "setup.R"))
library(btools)

```


```{r}
#| label: get-my-prelim-list

# get list from working folder

list_name <- "frs.rda"
fpath <- fs::path(DIRS$work, list_name)
load(fpath)

```


```{r}
#| label: categorize-my-frs-data

frsd_info <- tibble(
  obj = 1:length(names(frs)),
  name = names(frs)
) |>
  mutate(
    type = case_when(
      str_detect(name, "table") ~ "table",
      str_sub(name, -1) == "_" ~ "global",
      .default = "other"
    )
  )

count(frsd_info, type)


```


## Load and categorize the "target" data from Gang
```{r}
#| label: get-params-gang

# C:\Users\donbo\Documents\R_Projects\pendata\data-raw\gang\params_bf_cal.RData
fpath <- fs::path(GROOT, "data-raw", "gang", "params_bf_cal.RData")
load(fpath) # loads params, an environment
paramsg <- params
rm(params)

paramsg_info <- tibble(
  obj = 1:length(names(paramsg)),
  name = names(paramsg)
) |>
  mutate(
    type = case_when(
      str_detect(name, "table") ~ "table",
      str_sub(name, -1) == "_" ~ "global",
      .default = "other"
    )
  )

count(paramsg_info, type)
#   type       n
#   <chr>  <int>
# 1 global   110
# 2 other      5
# 3 table     52

paramsg_info |> filter(type == "other")

```

```{r}
#| label: get-frs-gang

# C:\Users\donbo\Documents\R_Projects\pendata\data-raw\gang\params_bf_cal.RData
fpath <- fs::path(GROOT, "data-raw", "gang", "frs_data_env_bf_cal.RData")
load(fpath) # loads frs_data_env, an environment
# 268 objects
frsg_info <- tibble(
  obj = 1:length(names(frs_data_env)),
  name = names(frs_data_env)
) |>
  mutate(
    type = case_when(
      str_detect(name, "table") ~ "table",
      str_sub(name, -1) == "_" ~ "global",
      .default = "other"
    )
  )

count(frsg_info, type)

#   type       n
#   <chr>  <int>
# 1 global    72
# 2 other     34
# 3 table    162

```

## Create paramsg counterpart from my frs list

```{r}
#| label: params-globals

# what globals does Gang have in params?
pglobals <- paramsg_info |>
  filter(type == "global") |>
  arrange(name) |>
  pull(name) # 110 globals
pglobals # gang's globals

# what globals do I have in frs?
dglobals <- names(frs$constants_assumptions) |> sort() # 110 items
dglobals # my globals

# compare the two sets of globals

setdiff(dglobals, pglobals)
#  [1] "admin_model_al_" "admin_model_norm_cost_" "admin_val_al_" "eco_model_al_" "eco_model_norm_cost_"
#  [6] "eco_val_al_" "eso_model_al_" "eso_model_norm_cost_" "eso_val_al_" "judges_model_al_"
# [11] "judges_model_norm_cost_" "judges_val_al_" "regular_model_al_" "regular_model_norm_cost_" "regular_val_al_"
# [16] "senior_management_model_al_" "senior_management_model_norm_cost_" "senior_management_val_al_" "special_model_al_" "special_model_norm_cost_"
# [21] "special_val_al_"

```

## Matching globals

```{r}
#| label: check-matching-globals

(matching_global_names <- intersect(pglobals, dglobals))

gang_globals <- mget(matching_global_names, envir = paramsg, inherits = FALSE)
don_globals <- frs$constants_assumptions[matching_global_names]

gmatches <- enframe(gang_globals, name = "name", value = "gang") |>
  mutate(gang = unlist(gang))

dmatches <- enframe(don_globals, name = "name", value = "don") |>
  mutate(don = unlist(don))

gdmatches <- left_join(gmatches, dmatches, by = join_by(name))

tofix <- gdmatches |>
  filter(don != gang)

constants_vec <- unlist(frs$constants_assumptions)
constants_vec["ben_payment_ratio_"] <- paramsg$ben_payment_ratio_ # I am missing this -- why? djb
tofix2 <- tofix |>
  separate_wider_delim(
    cols = don,
    names = c("var1", "operator", "var2"),
    delim = " ",
    too_few = "align_start",
    cols_remove = FALSE
  ) |>
  mutate(
    val1 = case_when(
      str_detect(var1, "^\\s*-?\\d*\\.?\\d+(e[+-]?\\d+)?\\s*$") ~
        as.numeric(var1),
      var1 %in% names(constants_vec) ~ as.numeric(constants_vec[var1]),
      .default = NA_real_
    ),
    val2 = case_when(
      str_detect(var2, "^\\s*-?\\d*\\.?\\d+(e[+-]?\\d+)?\\s*$") ~
        as.numeric(var2),
      var2 %in% names(constants_vec) ~ as.numeric(constants_vec[var2]),
      .default = NA_real_
    ),
    fixed = case_when(
      operator == "*" ~ val1 * val2,
      operator == "-" ~ val1 - val2,
      operator == "/" ~ val1 / val2,
      is.na(operator) ~ val1,
      .default = NA_real_
    )
  ) |>
  mutate(diff = fixed - as.numeric(gang)) |>
  arrange(desc(abs(diff)))
tofix2

frs$constants_assumptions["admin_outflow_"]


# fixed_matches
all_matches <- frs$constants_assumptions[matching_global_names]
names_of_fixvalues <- tofix2 |> pull(name)
fixed_values <- tofix2 |> pull(fixed)
fixed_matches <- all_matches
fixed_matches[names_of_fixvalues] <- fixed_values

```

## Missing globals

```{r}
#| label: fillin-missing-globals

(missing_global_names <- setdiff(pglobals, dglobals)) # 21 missing globals
# [1] "age_range_" "class_name_" "class_names_" "class_names_no_drop_frs_" "class_names_no_frs_" "entry_year_range_"
# [7] "max_age_" "max_year_" "min_age_" "min_year_" "model_period_" "model_return_"
# [13] "nc_cal_" "new_year_" "return_2023_" "return_scen_" "return_scenarios_original_" "start_year_"
# [19] "term_rate_" "year_range_" "yos_range_"

# some of the missing globals are tibbles, we won't worry about them yet
missing_globals <- mget(missing_global_names, envir = paramsg, inherits = FALSE)

fglob <- list()
# model items and assumptions -- these normally would not be included in pendata
fglob$model_period_ <- 30
fglob$model_return_ <- .067
fglob$return_2023_ <- .067
fglob$return_scen_ <- "assumption"
fglob$return_scenarios_original_ <- paramsg$return_scenarios_original_

# class names
fglob$class_names_no_drop_frs_ <- unique(frs$headcount_salary$class)
fglob$class_names_no_drop_frs_ <- fglob$class_names_no_drop_frs_[order(match(
  fglob$class_names_no_drop_frs_,
  paramsg$class_names_no_drop_frs_
))] # put in Gang's order

fglob$class_names_no_frs_ <- c(fglob$class_names_no_drop_frs_, "drop")
fglob$class_names_ <- c(fglob$class_names_no_frs_, "frs")
fglob$class_name_ <- fglob$class_names_[1]

# age items
fglob$min_age_ <- CONSTANTS$minage
fglob$max_age_ <- CONSTANTS$maxage
fglob$age_range_ <- fglob$min_age_:fglob$max_age_

# year items
fglob$min_year_ <- 1970
fglob$max_year_ <- 2154
fglob$year_range_ <- fglob$min_year_:fglob$max_year_
fglob$entry_year_range_ <- fglob$min_year_:2052
fglob$new_year_ <- 2024
fglob$start_year_ <- 2022

# yos items
fglob$yos_range_ <- CONSTANTS$minyos:CONSTANTS$maxyos

(togo <- setdiff(missing_global_names, names(fglob)))
missing_globals[togo]

# construct the calibration factors nc_cal_
fca <- frs$constants_assumptions
vals <- str_subset(names(fca), "val_norm_cost_") |> sort()
text <- str_subset(names(fca), "nc_cal_") |> sort()
# fca[vals]
# fca[text]
fglob$nc_cal_ <- tibble(
  vname = vals,
  vnc = unlist(fca[vals]),
  vname2 = text,
  textvals = unlist(fca[text])
) |>
  mutate(
    class = str_remove(vname, "_val_norm_cost_"),
    calfactor = as.numeric(stringr::str_extract(textvals, "[0-9.]+$")),
    nc_cal_ = vnc / calfactor
  ) |>
  select(class, nc_cal_)

# $nc_cal_
# # A tibble: 7 Ã— 2
#   class             nc_cal_
#   <chr>               <dbl>
# 1 admin               1.40
# 2 eco                 0.828
# 3 eso                 0.940
# 4 judges              0.917
# 5 regular             0.985
# 6 senior_management   0.961
# 7 special             0.985

(togo <- setdiff(missing_global_names, names(fglob)))
missing_globals[togo]

fglob$term_rate_ <- paramsg$term_rate_ # use Gang's now -- mine contains values constructed later in the process!

# finally, construct the term rate table
# it has male and female but pendata should only give total what total would it give
check <- paramsg$term_rate_ |>
  summarise(rate = mean(rate), .by = c(yos, class, age)) |>
  arrange(yos, class, age)
# compare to what I have
count(frs$withdrawal, age_label)
check2 <- frs$withdrawal |>
  select(yos = yos_lb, class, age = age_label, rate = value) |>
  mutate(age = ifelse(age == "55+", "over_55", age)) |>
  arrange(yos, class, age)

comp <- bind_rows(
  check |> mutate(type = "gang"),
  check2 |> mutate(type = "don")
) |>
  pivot_wider(names_from = type, values_from = rate) |>
  mutate(diff = don - gang) |>
  arrange(class, yos, age)
comp

temp <- comp |> filter(is.na(gang) | is.na(don))
# gang does not have admin yos 31 -- apparently I gave yos_lb 31 label to 30+
temp2 <- paramsg$term_rate_ |> filter(class == "admin")

```

```{r}
#| label: params-tables

# what globals does Gang have in params?
ptables <- paramsg_info |>
  filter(type == "table") |>
  arrange(name) |>
  pull(name) # 110 globals
ptables

# what tables do I have in frs?
dtables <- names(frs$constants_assumptions) |> sort() # 110 items
dtables

# headcount salary
names(paramsg) |> str_subset("headcount")

# compare the two sets of globals
(missing_global_names <- setdiff(pglobals, dglobals)) # 21 missing globals
missing_globals <- mget(missing_global_names, envir = paramsg, inherits = FALSE)

```

## Save final list

```{r}
#| label: save-final-list
#| eval: false

# later use this:
# save_name <- paste0(PLAN_CONSTANTS$plan, ".rda")
# fpath <- fs::path(GROOT, "data", save_name)
# save(list = PLAN_CONSTANTS$plan, file = fpath, compress = "xz")

```