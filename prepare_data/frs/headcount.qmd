---
format:
  html:
    toc: true
    toc-depth: 4
    page-layout: full
    css: wider.css
---    

# Headcount and salary tables

```{r}
#| label: setup

source(here::here("R", "folders.R"))
source(here::here("R", "libraries.R"))

# get raw extracted data as a list
plan <- "frs"
plandir <- fs::path(DPLANS, plan)
xddir <- fs::path(plandir, "extracted_data")

rawdata <- readRDS(fs::path(xddir, "frs_inputs_raw.rds"))
names(rawdata)

```

```{r}
#| label: data-for-experimentation

sheet <- "headcount_admin"
info <- rawdata[[sheet]]$info
data <- rawdata[[sheet]]$data

```

```{r}
#| label: function-flip

flip <- function(
  data, # data frame to be flipped
  rowvar, # name to use as prefix for row identifiers -- string -- e.g., "age"
  colvar, # name to use as prefix for column identifiers -- string -- e.g., "yos"
  rowlb = NULL, # lower bounds for the row -- numeric vector -- e.g., 10 if the row label is "10-19"
  rowub = NULL, # upper bounds for the row -- numeric vector
  rowlabels = NULL, # string vector, if missing will use 1st column
  collb = NULL, # lower bounds for the columns in the raw data -- numeric vector -- e.g., 20 if column label is "20-24"
  colub = NULL, # upper bounds for the column -- numeric vector
  collabels = NULL # if NULL will use column names
) {
  # flip assumes a data frame where first column is a label and other columns are (or will be converted to) numeric
  if (is.null(rowlabels)) {
    rowlabels <- data |> pull(1)
  }
  if (is.null(collabels)) {
    collabels <- names(data)[-1]
  }
  coltbl <- tibble(collabel = collabels, collb, colub)

  datalong <- data |>
    select(-1) |>
    mutate(rowlabel = rowlabels, rowlb = rowlb, rowub = rowub) |>
    pivot_longer(
      cols = -c(rowlabel, rowlb, rowub),
      names_to = "collabel"
    ) |>
    left_join(coltbl, by = join_by(collabel)) |>
    relocate(value, .after = colub) |>
    mutate(value = as.numeric(value)) |>
    rename_with(
      .fn = \(x) str_replace(x, "row", paste0(rowvar, "_")),
      .cols = starts_with("row")
    ) |>
    rename_with(
      .fn = \(x) str_replace(x, "col", paste0(colvar, "_")),
      .cols = starts_with("col")
    )
  return(datalong)
}

# flip(
#   data,
#   rowvar = "age",
#   colvar = "yos",
#   rowlb = agelb,
#   rowub = ageub,
#   collb = yoslb,
#   colub = yosub
# )

```

## Define sheets, labels, bounds and other flip arguments for headcount and salary

```{r}
#| label: define-sheets

(hcsheets <- stringr::str_subset(names(rawdata), "headcount_"))
(salsheets <- stringr::str_subset(names(rawdata), "salary_"))

```

```{r}
#| label: define-arguments

# these pertain both to headcount and salary

rowvar <- "age"
colvar <- "yos"

agelb <- c(0, seq(20, 65, 5), 0)
ageub <- c(20, seq(24, 64, 5), 110, 110)

yoslb <- c(0, seq(5, 50, 5), 0)
yosub <- c(seq(4, 49, 5), 70, 70)

```

## Headcount data

```{r}
#| label: get-headcount

result <- hcsheets |>
  map(\(x) pluck(rawdata, x, "data")) |>
  setNames(hcsheets)

res2 <- purrr::map(
  result,
  flip,
  rowvar = rowvar,
  colvar = colvar,
  rowlb = agelb,
  rowub = ageub,
  collb = yoslb,
  colub = yosub
)

hclong <- list_rbind(res2, names_to = "class") # djb this is good

count(hclong, yos_label)
count(hclong, class)

```

```{r}
#| label: check-totals

hclong |>
  mutate(agetype = ifelse(age_label == "Total Count", "total", "detail")) |>
  summarise(value = sum(value), .by = agetype)

hclong |>
  mutate(yostype = ifelse(yoslabel == "All Years", "total", "detail")) |>
  summarise(value = sum(value), .by = yostype)

```



## Salary data

```{r}
#| label: get-salaries

result <- salsheets |>
  map(\(x) pluck(rawdata, x, "data")) |>
  setNames(hcsheets)

res2 <- purrr::map(
  result,
  flip,
  rowvar = rowvar,
  colvar = colvar,
  rowlb = agelb,
  rowub = ageub,
  collb = yoslb,
  colub = yosub
)

sallong <- list_rbind(res2, names_to = "class") # djb this is good

count(sallong, yos_label)
count(sallong, class)

```

```{r}
#| label: check-totals

sallong |>
  mutate(agetype = ifelse(agelabel == "Total Count", "total", "detail")) |>
  summarise(headcount = sum(headcount), .by = agetype)

sallong |>
  mutate(yostype = ifelse(yoslabel == "All Years", "total", "detail")) |>
  summarise(headcount = sum(headcount), .by = yostype)

```