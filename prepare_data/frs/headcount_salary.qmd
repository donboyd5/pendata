---
format:
  html:
    toc: true
    toc-depth: 4
    page-layout: full
    css: wider.css
---

# Headcount and salary tables

```{r}
#| label: setup

source(here::here("R", "folders.R"))
source(here::here("R", "libraries.R"))
source(here::here("R", "functions.R"))

# get raw extracted data as a list
plan <- "frs"
plandir <- fs::path(DPLANS, plan)
xddir <- fs::path(plandir, "extracted_data")

rawdata <- readRDS(fs::path(xddir, "frs_inputs_raw.rds"))
names(rawdata)

```

```{r}
#| label: data-for-experimentation

sheet <- "headcount_admin"
info <- rawdata[[sheet]]$info
data <- rawdata[[sheet]]$data

```


## Define sheets, labels, bounds and other flip arguments for headcount and salary

```{r}
#| label: define-sheets

# make sure sheet names look right

(hcsheets <- stringr::str_subset(names(rawdata), "headcount_"))
(salsheets <- stringr::str_subset(names(rawdata), "salary_"))


```

```{r}
#| label: define-arguments

# the following arguments pertain both to headcount and salary

agemax <- 110
yosmax <- 70

rowvar <- "age"
colvar <- "yos"

agelb <- c(0, seq(20, 65, 5), 0)
ageub <- c(20, seq(24, 64, 5), agemax, agemax)

yoslb <- c(0, seq(5, 50, 5), 0)
yosub <- c(seq(4, 49, 5), yosmax, yosmax)

# make sure these look right
cbind(agelb, ageub)
cbind(yoslb, yosub)

```

## Get headcount and salary sheets and create a long tibble

```{r}
#| label: create-long-hcs-tibble

sheet_names <- c(hcsheets, salsheets)

data_list <- sheet_names |>
  map(\(x) pluck(rawdata, x, "data")) |>
  setNames(sheet_names)

names(data_list)

tbl_list <- purrr::map(
  data_list,
  flip,
  rowvar = rowvar,
  colvar = colvar,
  rowlb = agelb,
  rowub = ageub,
  collb = yoslb,
  colub = yosub
)

hcs_tbl <- list_rbind(tbl_list, names_to = "src") |>
  separate(src, into = c("variable", "class"), sep = "_", extra = "merge") |>
  mutate(
    rectype = case_when(
      age_label == "Total Count" ~ "total",
      yos_label == "All Years" ~ "total",
      .default = "detail"
    )
  )

```

```{r}
#| label: inspect-hcs-tbl

glimpse(hcs_tbl)
summary(hcs_tbl) # no missing values
skimr::skim_without_charts(hcs_tbl)
skimr::skim(hcs_tbl)
count(hcs_tbl, age_lb, age_ub, age_label)
count(hcs_tbl, yos_lb, yos_ub, yos_label) # note that yos max is 1 less than what the label shows
count(hcs_tbl, variable, class)
count(hcs_tbl, variable, rectype)

```

## Tests

For now, put tests inline. Later move or add them to package tests.

```{r}
#| label: headcount-salary-tests

testthat::local_edition(3)
library(testthat)
withr::deferred_clear()

# later, use the following:
# test_results <- testthat::test_file(
#   fs::path(DXDATA, "tests/testthat/test_sheets.R"),
#   reporter = testthat::TapReporter$new()
# )

hcsums <- hcs_tbl |>
  filter(
    variable == "headcount",
    class == "regular"
  ) |>
  summarise(value = sum(value), .by = c(class, age_label, rectype)) |>
  pivot_wider(names_from = rectype)

test_that("headcount detail sums equal headcount totals, all age groups", {
  hcsums <- hcs_tbl |>
    filter(
      variable == "headcount",
      age_label != "Total Count"
    ) |>
    summarise(value = sum(value), .by = c(class, age_label, rectype)) |>
    pivot_wider(names_from = rectype)

  expect_equal(hcsums$detail, hcsums$total, tolerance = 1e-8)
})

test_that("headcount detail sums equal headcount totals, all yos groups", {
  hcsums <- hcs_tbl |>
    filter(
      variable == "headcount",
      yos_label != "All Years"
    ) |>
    summarise(value = sum(value), .by = c(class, yos_label, rectype)) |>
    pivot_wider(names_from = rectype)

  expect_equal(hcsums$detail, hcsums$total, tolerance = 1e-8)
})

test_that("headcount detail sums equal headcount totals, grand total", {
  hcsums <- hcs_tbl |>
    filter(
      variable == "headcount",
      rectype == "detail" |
        (age_label == "Total Count" & yos_label == "All Years")
    ) |>
    summarise(value = sum(value), .by = c(class, rectype)) |>
    pivot_wider(names_from = rectype)

  expect_equal(hcsums$detail, hcsums$total, tolerance = 1e-8)
})


test_that("calculated average salaries in totals column (age groups) are within $1 of reported", {
  reported <- hcs_tbl |>
    filter(
      variable == "salary",
      rectype == "total",
      yos_label == "All Years"
    ) |>
    select(class, age_label, value)

  calculated <- hcs_tbl |>
    filter(yos_label != "All Years") |> # rectype == "detail", yos_label != "All Years"
    select(variable, class, yos_label, age_label, value) |>
    pivot_wider(names_from = variable) |>
    mutate(payroll = headcount * salary) |>
    summarise(
      headcount = sum(headcount),
      payroll = sum(payroll),
      .by = c(class, age_label)
    ) |>
    mutate(salary = replace_na(payroll / headcount, 0))

  compare <- left_join(
    reported |>
      select(class, age_label, reported = value),
    calculated |>
      select(class, age_label, calculated = salary),
    by = join_by(class, age_label)
  ) |>
    arrange(desc(abs(calculated - reported)))

  # expect_equal(compare$calculated, compare$reported, tolerance = 1e-8)
  expect_true(all(abs(compare$calculated - compare$reported) < 1)) # relaxed test
})

test_that("calculated average salaries in totals row (yos groups) are within $1 of reported", {
  reported <- hcs_tbl |>
    filter(
      variable == "salary",
      rectype == "total",
      age_label == "Total Count"
    ) |>
    select(class, yos_label, value)

  calculated <- hcs_tbl |>
    filter(age_label != "Total Count") |>
    select(variable, class, yos_label, age_label, value) |>
    pivot_wider(names_from = variable) |>
    mutate(payroll = headcount * salary) |>
    summarise(
      headcount = sum(headcount),
      payroll = sum(payroll),
      .by = c(class, yos_label)
    ) |>
    mutate(salary = replace_na(payroll / headcount, 0))

  compare <- left_join(
    reported |>
      select(class, yos_label, reported = value),
    calculated |>
      select(class, yos_label, calculated = salary),
    by = join_by(class, yos_label)
  ) |>
    arrange(desc(abs(calculated - reported)))

  # expect_equal(compare$calculated, compare$reported, tolerance = 1e-8)
  expect_true(all(abs(compare$calculated - compare$reported) < 1)) # relaxed test
})


test_that("calculated grand total salary equals reported grand total salary", {
  # NOTE: This will be important if we construct additional details for age groups or yos groups
  reported <- hcs_tbl |>
    filter(
      variable == "salary",
      rectype == "total",
      age_label == "Total Count",
      yos_label == "All Years"
    ) |>
    select(class, reported = value)

  calculated <- hcs_tbl |>
    filter(rectype == "detail") |>
    pivot_wider(names_from = variable) |>
    mutate(payroll = headcount * salary) |>
    summarise(
      headcount = sum(headcount),
      payroll = sum(payroll),
      .by = c(class, rectype)
    ) |>
    mutate(
      salary = replace_na(payroll / headcount, 0)
    ) |>
    select(class, calculated = salary)

  compare <- left_join(
    reported |>
      select(class, reported),
    calculated |>
      select(class, calculated),
    by = join_by(class)
  ) |>
    arrange(desc(abs(calculated - reported)))

  # expect_equal(compare$calculated, compare$reported, tolerance = 1e-8)
  expect_true(all(abs(compare$calculated - compare$reported) < 1)) # relaxed test
})

```

## If tests pass, drop totals, do final cleanup, and save details for later inclusion in package

```{r}

```