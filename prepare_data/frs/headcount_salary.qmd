---
format:
  html:
    toc: true
    toc-depth: 4
    page-layout: full
    css: wider.css
---

# Headcount and salary tables

```{r}
#| label: setup

source(here::here("R", "folders.R"))
source(here::here("R", "libraries.R"))
source(here::here("R", "constants.R"))
source(here::here("R", "params.R"))

source(here::here("R", "functions.R"))

```

```{r}
#| label: get-raw-data

# get raw extracted data as a list
plandir <- fs::path(DPLANS, PLAN)
xddir <- fs::path(plandir, "extracted_data")

rawdata <- readRDS(fs::path(xddir, "frs_inputs_raw.rds"))
names(rawdata)

```

```{r}
#| label: data-for-experimentation

sheet <- "headcount_admin"
info <- rawdata[[sheet]]$info
data <- rawdata[[sheet]]$data

```


## Define sheets, labels, bounds and other flip arguments for headcount and salary

```{r}
#| label: define-sheets

# make sure sheet names look right

(hcsheets <- stringr::str_subset(names(rawdata), "headcount_"))
(salsheets <- stringr::str_subset(names(rawdata), "salary_"))


```

```{r}
#| label: define-arguments

# the following arguments pertain both to headcount and salary

rowvar <- "age"
colvar <- "yos"

agelb <- c(0, seq(20, 65, 5), 0)
ageub <- c(20, seq(24, 64, 5), AGEMAX, AGEMAX)

yoslb <- c(0, seq(5, 50, 5), 0)
yosub <- c(seq(4, 49, 5), YOSMAX, YOSMAX)

# make sure these look right
cbind(agelb, ageub)
cbind(yoslb, yosub)

```

## Get headcount and salary sheets and create a long tibble

```{r}
#| label: create-long-hcs-tibble

sheet_names <- c(hcsheets, salsheets)

data_list <- sheet_names |>
  map(\(x) pluck(rawdata, x, "data")) |>
  setNames(sheet_names)

names(data_list)

tbl_list <- purrr::map(
  data_list,
  flip,
  rowvar = rowvar,
  colvar = colvar,
  rowlb = agelb,
  rowub = ageub,
  collb = yoslb,
  colub = yosub
)

hcs_tbl <- list_rbind(tbl_list, names_to = "src") |>
  separate(src, into = c("variable", "class"), sep = "_", extra = "merge") |>
  mutate(
    rectype = case_when(
      age_label == "Total Count" ~ "total",
      yos_label == "All Years" ~ "total",
      .default = "detail"
    )
  )

# save the first-cut headcount-salary table in the plan's working directory so that we can use it in tests
dwork <- fs::path(plandir, "work")
saveRDS(hcs_tbl, fs::path(dwork, "hcs_tbl.rds"))

```

```{r}
#| label: inspect-hcs-tbl

glimpse(hcs_tbl)
summary(hcs_tbl) # no missing values
skimr::skim_without_charts(hcs_tbl)
skimr::skim(hcs_tbl)
count(hcs_tbl, age_lb, age_ub, age_label)
count(hcs_tbl, yos_lb, yos_ub, yos_label) # note that yos max is 1 less than what the label shows
count(hcs_tbl, variable, class)
count(hcs_tbl, variable, rectype)

```

## Tests

For now, put tests inline. Later move or add them to package tests.

```{r}
#| label: headcount-salary-tests

# testthat::local_edition(3)
# library(testthat)

# NOTE: We can only run the headcount_salary tests if a plan's headcount and salary data has row and column totals
testthat::test_file(
  fs::path(DPREP, "tests/testthat/test_headcount_salary.R"),
  reporter = testthat::TapReporter$new()
)

```

## If tests pass, drop totals, do final cleanup, and save details for later inclusion in package

```{r}
#| label: clean-and-save

```